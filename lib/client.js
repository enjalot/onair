// Generated by CoffeeScript 1.3.3
(function() {
  var racer;

  racer = require('racer');

  racer.use(require('racer/lib/ot'));

  process.nextTick(function() {
    racer.init(this.init);
    return delete this.init;
  });

  racer.on('ready', function(model) {
    var applyChange, editorvalue, genOp, prevvalue, replaceText;
    applyChange = function(newval) {
      var commonEnd, commonStart, oldval;
      oldval = model.get('_room.text');
      if (oldval === newval) {
        return;
      }
      commonStart = 0;
      while (oldval.charAt(commonStart) === newval.charAt(commonStart)) {
        commonStart++;
      }
      commonEnd = 0;
      while (oldval.charAt(oldval.length - 1 - commonEnd) === newval.charAt(newval.length - 1 - commonEnd) && commonEnd + commonStart < oldval.length && commonEnd + commonStart < newval.length) {
        commonEnd++;
      }
      if (oldval.length !== commonStart + commonEnd) {
        model.otDel('_room.text', commonStart, oldval.length - commonStart - commonEnd);
      }
      if (newval.length !== commonStart + commonEnd) {
        model.otInsert('_room.text', commonStart, newval.substr(commonStart, newval.length - commonEnd));
      }
      return ui.model.trigger("go");
    };
    editorvalue = prevvalue = model.get('_room.text');
    replaceText = function(newText, transformCursor) {
      "newSelection = [\n  transformCursor editor.selectionStart\n  transformCursor editor.selectionEnd\n]";
      return ui.editor.cm.setValue(newText);
    };
    model.on('otInsert', '_room.text', function(pos, text, isLocal) {
      var s;
      if (isLocal) {
        return;
      }
      editorvalue = ui.model.get("code");
      s = editorvalue.slice(0, pos) + text + editorvalue.slice(pos);
      return replaceText(s, function(cursor) {
        if (pos <= cursor) {
          return cursor + text.length;
        } else {
          return cursor;
        }
      });
    });
    model.on('otDel', '_room.text', function(pos, text, isLocal) {
      if (isLocal) {
        return;
      }
      editorvalue = ui.model.get("code");
      return replaceText(editorvalue.slice(0, pos) + editorvalue.slice(pos + text.length), function(cursor) {
        if (pos < cursor) {
          return cursor - Math.min(text.length, cursor - pos);
        } else {
          return cursor;
        }
      });
    });
    genOp = function(e) {
      return setTimeout(function() {
        editorvalue = ui.model.get("code");
        return applyChange(editorvalue.replace(/\r\n/g, '\n'));
      }, 0);
    };
    ui.model.on("change:code", genOp);
    ui.model.on("go", genOp);
    return "for event in ['input', 'keydown', 'keyup', 'select', 'cut', 'paste']\n  if editor.addEventListener\n    editor.addEventListener event, genOp, false\n  else\n    editor.attachEvent 'on' + event, genOp";
  });

}).call(this);
